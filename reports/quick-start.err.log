Traceback (most recent call last):
  File "/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/jupyter_core/utils/__init__.py", line 154, in wrapped
    asyncio.get_running_loop()
    ~~~~~~~~~~~~~~~~~~~~~~~~^^
RuntimeError: no running event loop

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/jupyter_cache/executors/utils.py", line 58, in single_nb_execution
    executenb(
    ~~~~~~~~~^
        nb,
        ^^^
    ...<4 lines>...
        **kwargs,
        ^^^^^^^^^
    )
    ^
  File "/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/nbclient/client.py", line 1319, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^^
  File "/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/jupyter_core/utils/__init__.py", line 158, in wrapped
    return loop.run_until_complete(inner)
           ~~~~~~~~~~~~~~~~~~~~~~~^^^^^^^
  File "/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/asyncio/base_events.py", line 725, in run_until_complete
    return future.result()
           ~~~~~~~~~~~~~^^
  File "/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/nbclient/client.py", line 709, in async_execute
    await self.async_execute_cell(
        cell, index, execution_count=self.code_cells_executed + 1
    )
  File "/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/nbclient/client.py", line 1062, in async_execute_cell
    await self._check_raise_for_error(cell, cell_index, exec_reply)
  File "/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/nbclient/client.py", line 918, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
# Initialize and fit the MID model
explainer = mid.MIDExplainer(
    estimator=estimator,
    interaction=True,
    params_main=70,
    penalty=.01,
    singular_ok=True,
)
explainer.fit(X_train)

print(explainer)
------------------

----- stdout -----
Generating predictions from the estimator...
------------------

[31m---------------------------------------------------------------------------[39m
[31mAttributeError[39m                            Traceback (most recent call last)
[36mCell[39m[36m [39m[32mIn[3][39m[32m, line 11[39m
[32m      2[39m explainer = mid.MIDExplainer(
[32m      3[39m     estimator=estimator,
[32m      4[39m     interaction=[38;5;28;01mTrue[39;00m,
[32m   (...)[39m[32m      7[39m     singular_ok=[38;5;28;01mTrue[39;00m,
[32m      8[39m )
[32m      9[39m explainer.fit(X_train)
[32m---> [39m[32m11[39m [38;5;28;43mprint[39;49m[43m([49m[43mexplainer[49m[43m)[49m

[36mFile [39m[32m/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/sklearn/base.py:381[39m, in [36mBaseEstimator.__repr__[39m[34m(self, N_CHAR_MAX)[39m
[32m    373[39m [38;5;66;03m# use ellipsis for sequences with a lot of elements[39;00m
[32m    374[39m pp = _EstimatorPrettyPrinter(
[32m    375[39m     compact=[38;5;28;01mTrue[39;00m,
[32m    376[39m     indent=[32m1[39m,
[32m    377[39m     indent_at_name=[38;5;28;01mTrue[39;00m,
[32m    378[39m     n_max_elements_to_show=N_MAX_ELEMENTS_TO_SHOW,
[32m    379[39m )
[32m--> [39m[32m381[39m repr_ = [43mpp[49m[43m.[49m[43mpformat[49m[43m([49m[38;5;28;43mself[39;49m[43m)[49m
[32m    383[39m [38;5;66;03m# Use bruteforce ellipsis when there are a lot of non-blank characters[39;00m
[32m    384[39m n_nonblank = [38;5;28mlen[39m([33m"[39m[33m"[39m.join(repr_.split()))

[36mFile [39m[32m/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/pprint.py:161[39m, in [36mPrettyPrinter.pformat[39m[34m(self, object)[39m
[32m    159[39m [38;5;28;01mdef[39;00m[38;5;250m [39m[34mpformat[39m([38;5;28mself[39m, [38;5;28mobject[39m):
[32m    160[39m     sio = _StringIO()
[32m--> [39m[32m161[39m     [38;5;28;43mself[39;49m[43m.[49m[43m_format[49m[43m([49m[38;5;28;43mobject[39;49m[43m,[49m[43m [49m[43msio[49m[43m,[49m[43m [49m[32;43m0[39;49m[43m,[49m[43m [49m[32;43m0[39;49m[43m,[49m[43m [49m[43m{[49m[43m}[49m[43m,[49m[43m [49m[32;43m0[39;49m[43m)[49m
[32m    162[39m     [38;5;28;01mreturn[39;00m sio.getvalue()

[36mFile [39m[32m/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/pprint.py:178[39m, in [36mPrettyPrinter._format[39m[34m(self, object, stream, indent, allowance, context, level)[39m
[32m    176[39m     [38;5;28mself[39m._readable = [38;5;28;01mFalse[39;00m
[32m    177[39m     [38;5;28;01mreturn[39;00m
[32m--> [39m[32m178[39m rep = [38;5;28;43mself[39;49m[43m.[49m[43m_repr[49m[43m([49m[38;5;28;43mobject[39;49m[43m,[49m[43m [49m[43mcontext[49m[43m,[49m[43m [49m[43mlevel[49m[43m)[49m
[32m    179[39m max_width = [38;5;28mself[39m._width - indent - allowance
[32m    180[39m [38;5;28;01mif[39;00m [38;5;28mlen[39m(rep) > max_width:

[36mFile [39m[32m/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/pprint.py:458[39m, in [36mPrettyPrinter._repr[39m[34m(self, object, context, level)[39m
[32m    457[39m [38;5;28;01mdef[39;00m[38;5;250m [39m[34m_repr[39m([38;5;28mself[39m, [38;5;28mobject[39m, context, level):
[32m--> [39m[32m458[39m     [38;5;28mrepr[39m, readable, recursive = [38;5;28;43mself[39;49m[43m.[49m[43mformat[49m[43m([49m[38;5;28;43mobject[39;49m[43m,[49m[43m [49m[43mcontext[49m[43m.[49m[43mcopy[49m[43m([49m[43m)[49m[43m,[49m
[32m    459[39m [43m                                            [49m[38;5;28;43mself[39;49m[43m.[49m[43m_depth[49m[43m,[49m[43m [49m[43mlevel[49m[43m)[49m
[32m    460[39m     [38;5;28;01mif[39;00m [38;5;129;01mnot[39;00m readable:
[32m    461[39m         [38;5;28mself[39m._readable = [38;5;28;01mFalse[39;00m

[36mFile [39m[32m/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/sklearn/utils/_pprint.py:191[39m, in [36m_EstimatorPrettyPrinter.format[39m[34m(self, object, context, maxlevels, level)[39m
[32m    190[39m [38;5;28;01mdef[39;00m[38;5;250m [39m[34mformat[39m([38;5;28mself[39m, [38;5;28mobject[39m, context, maxlevels, level):
[32m--> [39m[32m191[39m     [38;5;28;01mreturn[39;00m [43m_safe_repr[49m[43m([49m
[32m    192[39m [43m        [49m[38;5;28;43mobject[39;49m[43m,[49m[43m [49m[43mcontext[49m[43m,[49m[43m [49m[43mmaxlevels[49m[43m,[49m[43m [49m[43mlevel[49m[43m,[49m[43m [49m[43mchanged_only[49m[43m=[49m[38;5;28;43mself[39;49m[43m.[49m[43m_changed_only[49m
[32m    193[39m [43m    [49m[43m)[49m

[36mFile [39m[32m/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/sklearn/utils/_pprint.py:440[39m, in [36m_safe_repr[39m[34m(object, context, maxlevels, level, changed_only)[39m
[32m    438[39m recursive = [38;5;28;01mFalse[39;00m
[32m    439[39m [38;5;28;01mif[39;00m changed_only:
[32m--> [39m[32m440[39m     params = [43m_changed_params[49m[43m([49m[38;5;28;43mobject[39;49m[43m)[49m
[32m    441[39m [38;5;28;01melse[39;00m:
[32m    442[39m     params = [38;5;28mobject[39m.get_params(deep=[38;5;28;01mFalse[39;00m)

[36mFile [39m[32m/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/sklearn/utils/_pprint.py:95[39m, in [36m_changed_params[39m[34m(estimator)[39m
[32m     91[39m [38;5;28;01mdef[39;00m[38;5;250m [39m[34m_changed_params[39m(estimator):
[32m     92[39m [38;5;250m    [39m[33;03m"""Return dict (param_name: value) of parameters that were given to[39;00m
[32m     93[39m [33;03m    estimator with non-default values."""[39;00m
[32m---> [39m[32m95[39m     params = [43mestimator[49m[43m.[49m[43mget_params[49m[43m([49m[43mdeep[49m[43m=[49m[38;5;28;43;01mFalse[39;49;00m[43m)[49m
[32m     96[39m     init_func = [38;5;28mgetattr[39m(estimator.[34m__init__[39m, [33m"[39m[33mdeprecated_original[39m[33m"[39m, estimator.[34m__init__[39m)
[32m     97[39m     init_params = inspect.signature(init_func).parameters

[36mFile [39m[32m/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/sklearn/base.py:250[39m, in [36mBaseEstimator.get_params[39m[34m(self, deep)[39m
[32m    248[39m out = [38;5;28mdict[39m()
[32m    249[39m [38;5;28;01mfor[39;00m key [38;5;129;01min[39;00m [38;5;28mself[39m._get_param_names():
[32m--> [39m[32m250[39m     value = [38;5;28;43mgetattr[39;49m[43m([49m[38;5;28;43mself[39;49m[43m,[49m[43m [49m[43mkey[49m[43m)[49m
[32m    251[39m     [38;5;28;01mif[39;00m deep [38;5;129;01mand[39;00m [38;5;28mhasattr[39m(value, [33m"[39m[33mget_params[39m[33m"[39m) [38;5;129;01mand[39;00m [38;5;129;01mnot[39;00m [38;5;28misinstance[39m(value, [38;5;28mtype[39m):
[32m    252[39m         deep_items = value.get_params().items()

[31mAttributeError[39m: 'MIDExplainer' object has no attribute 'target_classes'

